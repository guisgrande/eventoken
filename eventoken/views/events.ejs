<%- include partials/header.ejs %>

<body>
  <h1>Event List</h1>
  <div id="eventsContainer"></div>
  <button id="loadMoreBtn" class="btn btn-primary mt-2" onclick="loadMoreEvents()">Load More</button>

  <script>
      const contractAddress = '0xec716657f30b72c899f7789137dff1e0b7ae298d';
      const contractABI = [];
      let currentIndex = 1; // Começa do índice 1
      const eventsPerPage = 6;

      async function loadMoreEvents() {
          try {
              await window.ethereum.request({ method: 'eth_requestAccounts' });
              const provider = new ethers.providers.Web3Provider(window.ethereum);
              const signer = provider.getSigner();

              const contract = new ethers.Contract(contractAddress, contractABI, signer);

              const totalEvents = await contract.nextEventId();
              const eventsContainer = document.getElementById('eventsContainer');
              eventsContainer.innerHTML = ''; // Limpa o conteúdo anterior

              for (let i = currentIndex; i < currentIndex + eventsPerPage && i < totalEvents; i++) {
                  const event = await contract.events(i);
                  const ticketsAvailable = await contract.ticketsAvailable(i);

                  const eventElement = document.createElement('div');
                  eventElement.classList.add('event', 'm-4', 'border');
                  eventElement.innerHTML = `
                      <h2>${event.name}</h2>
                      <p>${event.details}</p>
                      <p>Total Tickets: ${event.totalTickets}</p>
                      <p>Price: ${ethers.utils.formatEther(event.price)} ETH</p>
                      <p>Tickets Sold: ${event.ticketsSold}</p>
                      <p>Tickets Available: ${ticketsAvailable}</p>
                      <img src="${event.eventImage}" alt="Event Image" style="max-width: 100px;">
                      <img src="${event.ticketImage}" alt="Ticket Image" style="max-width: 100px;">
                      <button class="btn btn-primary mt-2" onclick="buyTicket(${event.eventId})">Buy Ticket</button>
                  `;
                  eventsContainer.appendChild(eventElement);
              }

              currentIndex += eventsPerPage;
              if (currentIndex >= totalEvents) {
                  document.getElementById('loadMoreBtn').style.display = 'none';
              }
          } catch (error) {
              console.error('Erro ao carregar eventos:', error);
              alert('Erro ao carregar eventos. Verifique o console para mais detalhes.');
          }
      }

      async function buyTicket(eventId) {
          try {
              const provider = new ethers.providers.Web3Provider(window.ethereum);
              const signer = provider.getSigner();

              const contract = new ethers.Contract(contractAddress, contractABI, signer);

              // Solicita a quantidade desejada de tickets ao usuário
              const quantity = prompt('Quantos tickets você deseja comprar?', '1');
              if (!quantity || isNaN(quantity)) {
                  throw new Error('Quantidade inválida');
              }

              // Efetua a compra de tickets chamando a função do contrato
              // const tx = await contract.purchaseTickets(eventId, quantity, { value: 0 });
              // await tx.wait();

              // Obter o preço do evento diretamente do contrato
              const event = await contract.events(eventId); // Supondo que existe uma função `events` que retorna os detalhes do evento
              const ticketPrice = event.price;

              // Calcular o preço total dos tickets que o usuário deseja comprar
              const totalPrice = ticketPrice.mul(quantity);

              // Chamada à função purchaseTickets
              const tx = await contract.purchaseTickets(eventId, quantity, { value: totalPrice });
              await tx.wait();
              
              alert(`Tickets comprados com sucesso para o evento ${eventId}!`);
              loadMoreEvents(); // Recarrega a lista de eventos após a compra
          } catch (error) {
              console.error('Erro ao comprar tickets:', error);
              alert('Erro ao comprar tickets. Verifique o console para mais detalhes.');
          }
      }

      // Carrega os primeiros eventos quando a página é carregada
      document.addEventListener('DOMContentLoaded', loadMoreEvents);
  </script>
</body>

<%- include partials/footer.ejs %>