<%- include partials/header.ejs %>

<body>
  <div class="text-center m-4">
    <h1><i class="bi bi-ticket-perforated first-color"></i> My Tickets</h1>
    <p>All your tickets in one place.</p>
  </div>

  <!-- Elemento para exibir a lista de tickets -->
  <div class="d-flex justify-content-center">
    <ul id="ticketList" class="list-group col-9"></ul>
  </div>

    <!-- Modal para inserir o endereço do destinatário -->
    <div class="modal" id="transferModal" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Transfer Ticket</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="transferForm">
              <div class="form-group">
                <label for="recipientAddress">Recipient Address</label>
                <input type="text" class="form-control" id="recipientAddress" required>
                <input type="hidden" id="transferTicketId">
              </div>
              <button type="submit" class="btn btn-primary">Transfer</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal para listar um ticket à venda -->
    <div class="modal fade" id="listTicketModal" tabindex="-1" role="dialog" aria-labelledby="listTicketModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" id="listTicketModalLabel">Listar Ticket para Venda</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                  </button>
              </div>
              <div class="modal-body">
                  <form id="listTicketForm">
                      <div class="form-group">
                          <label for="ticketPrice">Preço do Ticket (ETH)</label>
                          <input type="number" step="0.01" min="0" class="form-control" id="ticketPrice" placeholder="Insira o preço do ticket" required>
                          <input type="hidden" id="sellTicketId">
                      </div>
                  </form>
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                  <button type="button" class="btn btn-primary" onclick="listTicketForSale()">Listar para Venda</button>
              </div>
          </div>
      </div>
  </div>

</body>

<script>
  console.log("OUTSIDE")

  async function loadTickets() {

    try {
      await window.ethereum.request({ method: 'eth_requestAccounts' });

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      console.log("Signer: " + signer)

      // Obter o endereço formatado do usuário
      const userAddress = await signer.getAddress();
      console.log("User add: " + userAddress)
      
      const contract = new ethers.Contract(contractAddress, contractABI, signer);

      // Obter todos os tickets do usuário
      const ticketIds = await contract.getUserAllTickets(userAddress);
      console.log("Tickets IDS: " + ticketIds)

      // Lista para armazenar informações detalhadas de cada ticket
      const ticketDetails = [];
      console.log("Tickets Details before loop: " + ticketDetails)

      // Coletar informações detalhadas de cada ticket
      for (let i = 0; i < ticketIds.length; i++) {
        const ticketId = ticketIds[i];

        const eventId = await contract.getEventIdByTicket(ticketId);
        console.log("Event ID: " + eventId)
        
        // Obter os detalhes do evento utilizando getEventDetails
        const eventDetails = await contract.getEventDetails(eventId);
        console.log("Event Details: " + eventDetails)
        // Construir o objeto com informações detalhadas do ticket
        const ticketInfo = {
          id: ticketId,
          eventName: eventDetails[1],
          eventDetails: eventDetails[2],
          totalTickets: eventDetails[3],
          price: eventDetails[4],
          eventImage: eventDetails[5],
          ticketImage: eventDetails[6],
          ticketsSold: eventDetails[8]
        };

        ticketDetails.push(ticketInfo);
      } // end for

      console.log("Tickets Details after loop: " + ticketDetails)

      // Renderizar os tickets na página
      const ticketList = document.getElementById('ticketList');
      ticketList.innerHTML = '';

      ticketDetails.forEach((ticket) => {
        if (ticket.id > 0) {
          const listItem = document.createElement('li');
          listItem.classList.add('list-group-item', 'm-2', 'bg-dark', 'text-white', 'rounded');

          const divRow = document.createElement('div');
          divRow.classList.add('row');

          const divLeft = document.createElement('div');
          divLeft.classList.add('col-7');

          const divRight = document.createElement('div');
          divRight.classList.add('col-5');

          // Criar elementos para mostrar as informações do ticket à venda
          const eventNameElement = document.createElement('h3');
          eventNameElement.classList.add('mt-2')
          eventNameElement.textContent = `Event Name: ${ticket.eventName}`;

          const eventDetailsElement = document.createElement('p');
          eventDetailsElement.textContent = `Details: ${ticket.eventDetails}`;

          const ticketIdElement = document.createElement('p');
          ticketIdElement.classList.add('m-2');
          ticketIdElement.textContent = `Ticket ID: ${ticket.id}`;

          const priceElement = document.createElement('p');
          priceElement.classList.add('m-2')
          priceElement.textContent = `Price: ${ethers.utils.formatEther(ticket.price)} ETH`;

          const eventImageElement = document.createElement('img');
          eventImageElement.src = ticket.eventImage;
          eventImageElement.alt = 'Event Image';
          eventImageElement.style.maxWidth = '300px';

          const ticketImageElement = document.createElement('img');
          ticketImageElement.src = ticket.ticketImage;
          ticketImageElement.classList.add('m-2')
          ticketImageElement.alt = 'Ticket Image';
          ticketImageElement.style.maxWidth = '150px';

          const transferButton = document.createElement('button');
          transferButton.classList.add('btn', 'button-one', 'm-2');
          transferButton.textContent = 'Transfer Ticket';
          transferButton.onclick = () => openTransferModal(ticket.id);

          const resaleButton = document.createElement('button');
          resaleButton.classList.add('btn', 'button-one', 'm-2');
          resaleButton.textContent = 'Sell Ticket';
          resaleButton.onclick = () => openSellModal(ticket.id);

          // Adicionar elementos à lista de tickets
          divLeft.appendChild(eventImageElement);
          divLeft.appendChild(eventNameElement);
          divLeft.appendChild(eventDetailsElement);
          divRight.appendChild(ticketImageElement);
          divRight.appendChild(ticketIdElement);
          divRight.appendChild(priceElement);
          divRight.appendChild(transferButton);
          divRight.appendChild(resaleButton);

          divRow.appendChild(divLeft);
          divRow.appendChild(divRight);

          listItem.appendChild(divRow);

          ticketList.appendChild(listItem);
        }
      });

      ticketDetails.forEach((ticket) => {
          console.log(`Ticket ID: ${ticket.id}`);
          console.log(`Event Name: ${ticket.eventName}`);
          console.log(`Details: ${ticket.eventDetails}`);
          console.log(`Total Tickets: ${ticket.totalTickets}`);
          console.log(`Price: ${ethers.utils.formatEther(ticket.price)} ETH`);
          console.log(`Tickets Sold: ${ticket.ticketsSold}`);
          console.log(`Event Image: ${ticket.eventImage}`);
          console.log(`Ticket Image: ${ticket.ticketImage}`);
          console.log('-----------------------------------');
      });

    } catch (error) {
      console.error('Erro ao carregar tickets:', error);
      alert('Erro ao carregar tickets. Verifique o console para mais detalhes.');
    }
  } // end loadTickets

  function openTransferModal(ticketId) {
    const transferModal = document.getElementById('transferModal');
    const transferTicketId = document.getElementById('transferTicketId');
    transferTicketId.value = ticketId;
    $(transferModal).modal('show');
  } // End openTransferModal

  function openSellModal(ticketId) {
    const transferModal = document.getElementById('listTicketModal');
    const sellTicketId = document.getElementById('sellTicketId');
    sellTicketId.value = ticketId;
    $(transferModal).modal('show');
  } // End openSellModal

  async function transferTicket(event) {
    event.preventDefault();
    const transferForm = document.getElementById('transferForm');
    const recipientAddress = transferForm.recipientAddress.value;
    const ticketId = transferForm.transferTicketId.value;

    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const contractAddress = ethers.utils.getAddress('0x86e58c90c3232ed333be6a3ef3482194873a3537');
      const contract = new ethers.Contract(contractAddress, contractABI, signer);

      await contract.transferTicket(recipientAddress, ticketId);
      alert('Ticket transferred successfully!');
      loadTickets(); // Reload tickets after transfer
    } catch (error) {
      console.error('Error transferring ticket:', error);
      alert('Error transferring ticket. Check the console for more details.');
    }
  } // End transferTicket
  
  async function listTicketForSale() {
  const ticketId = document.getElementById('sellTicketId').value;
    const ticketPrice = document.getElementById('ticketPrice').value;

    try {
      // Configurar o provedor e o signer
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(contractAddress, contractABI, signer);

      // Antes de enviar a transação, configure um limite de gás suficiente
      const overrides = {
        gasLimit: ethers.utils.hexlify(300000), // Ajuste o valor de acordo com suas necessidades
      };

      // Chame a função do contrato passando os overrides
      await contract.listTicketForSale(ticketId, ethers.utils.parseEther(ticketPrice), overrides);

      alert('Ticket listed for sale successfully!');
      $('#listTicketModal').modal('hide'); // Fechar modal após listagem

      loadTickets(); // Recarregar os tickets após a listagem

    } catch (error) {
      console.error('Error listing ticket for sale:', error);
      alert('Error listing ticket for sale. Check the console for more details.');
    }
  }

  document.getElementById('transferForm').addEventListener('submit', transferTicket);

  // Chamar a função para carregar os tickets ao carregar a página
  window.onload = loadTickets;

</script>

<%- include partials/footer.ejs %>