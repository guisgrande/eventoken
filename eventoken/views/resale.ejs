<%- include partials/header.ejs %>

<body>
  <h1><%= title %></h1>
  <p>Resale Tickets page</p>

  <!-- Elemento para exibir a lista de tickets para revenda -->
  <ul id="resaleTicketList" class="list-group"></ul>
</body>

<script>
  async function loadResaleTickets() {
    try {
      await window.ethereum.request({ method: 'eth_requestAccounts' });

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
        
      // Obter o endereço formatado do usuário
      const userAddress = await signer.getAddress();
      
      const contract = new ethers.Contract(contractAddress, contractABI, signer);

      // Chamar a função getAllTicketsForSale para obter todos os tickets à venda
      const ticketsForSale = await contract.getAllTicketsForSale();

      // Lista para armazenar informações detalhadas de cada ticket à venda
      const resaleTicketDetails = [];

      // Coletar informações detalhadas de cada ticket à venda
      for (let i = 0; i < ticketsForSale.length; i++) {
        const ticket = ticketsForSale[i];

        if (ticket.tokenId !== 0) {
          // Construir o objeto com informações detalhadas do ticket
          const ticketInfo = {
            id: ticket.tokenId,
            price: ticket.price,
            seller: ticket.seller
          };

          // Obter detalhes adicionais do evento, se necessário
          const eventId = await contract.getEventIdByTicket(ticket.tokenId);
          const eventDetails = await contract.getEventDetails(eventId);

          ticketInfo.eventName = eventDetails[1];
          ticketInfo.eventDetails = eventDetails[2];
          ticketInfo.eventImage = eventDetails[5];
          ticketInfo.ticketImage = eventDetails[6];

          resaleTicketDetails.push(ticketInfo);
        }
      }

      // Renderizar os tickets à venda na página
      const resaleTicketList = document.getElementById('resaleTicketList');
      resaleTicketList.innerHTML = '';

      resaleTicketDetails.forEach((ticket) => {
        const listItem = document.createElement('li');
        listItem.classList.add('list-group-item');

        // Criar elementos para mostrar as informações do ticket à venda
        const eventNameElement = document.createElement('p');
        eventNameElement.textContent = `Event Name: ${ticket.eventName}`;

        const eventDetailsElement = document.createElement('p');
        eventDetailsElement.textContent = `Details: ${ticket.eventDetails}`;

        const ticketIdElement = document.createElement('p');
        ticketIdElement.textContent = `Ticket ID: ${ticket.id}`;

        const priceElement = document.createElement('p');
        priceElement.textContent = `Price: ${ethers.utils.formatEther(ticket.price)} ETH`;

        const sellerElement = document.createElement('p');
        sellerElement.textContent = `Seller: ${ticket.seller}`;

        const eventImageElement = document.createElement('img');
        eventImageElement.src = ticket.eventImage;
        eventImageElement.alt = 'Event Image';
        eventImageElement.style.maxWidth = '100px';

        const ticketImageElement = document.createElement('img');
        ticketImageElement.src = ticket.ticketImage;
        ticketImageElement.alt = 'Ticket Image';
        ticketImageElement.style.maxWidth = '100px';

        // Botão de compra
        const buyButton = document.createElement('button');
        buyButton.textContent = 'Buy Ticket';
        buyButton.classList.add('btn', 'btn-primary', 'mt-2');
        
        buyButton.onclick = async () => {
          try {
            const gasLimit = 300000; // Defina um valor adequado para o limite de gás aqui

            await contract.buyTicket(ticket.id, {
              value: ticket.price,
              gasLimit: gasLimit
            });

            // Transação bem-sucedida
            console.log("Ticket purchased successfully!");
          } catch (error) {
            // Tratamento de erros
            console.error("Error purchasing ticket:", error);
            alert("Error purchasing ticket. Check console for details.");
          }
        };

        // Adicionar elementos à lista de tickets à venda
        listItem.appendChild(eventNameElement);
        listItem.appendChild(eventDetailsElement);
        listItem.appendChild(ticketIdElement);
        listItem.appendChild(priceElement);
        listItem.appendChild(sellerElement);
        listItem.appendChild(eventImageElement);
        listItem.appendChild(ticketImageElement);
        listItem.appendChild(buyButton);

        resaleTicketList.appendChild(listItem);
      });

    } catch (error) {
      console.error('Error loading tickets for sale:', error);
      alert('Error loading tickets for sale. Check console for more details.');
    }
  } // end loadResaleTickets

  // Chamar a função para carregar os tickets à venda ao carregar a página
  window.onload = loadResaleTickets;

</script>

<%- include partials/footer.ejs %>
