<%- include partials/header.ejs %>

<body>
  <h1 class="text-center m-4"><i class="bi bi-receipt-cutoff first-color"></i> Resale Tickets</h1>
  <p class="text-center m-4">Your second chance to get the ticket for the Events.</p>

  <!-- Element to display the list of tickets for resale -->
  <div class="d-flex justify-content-center">
    <ul id="resaleTicketList" class="list-group col-md-8"></ul>
  </div>

</body>

<script>
  async function loadResaleTickets() {
    try {
      await window.ethereum.request({ method: 'eth_requestAccounts' });

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
        
      // Get the user's formatted address
      const userAddress = await signer.getAddress();
      
      const contract = new ethers.Contract(contractAddress, contractABI, signer);

      // Call the getAllTicketsForSale function to get all the tickets on sale
      const ticketsForSale = await contract.getAllTicketsForSale();

      // List for storing detailed information on each ticket for sale
      const resaleTicketDetails = [];

      // Collect detailed information on each sales ticket
      for (let i = 0; i < ticketsForSale.length; i++) {
        const ticket = ticketsForSale[i];

        if (ticket.tokenId !== 0) {
          // Build the object with detailed ticket information
          const ticketInfo = {
            id: ticket.tokenId,
            price: ticket.price,
            owner: ticket.owner
          };

          // Get additional event details, if necessary
          const eventId = await contract.getEventIdByTicket(ticket.tokenId);
          const eventDetails = await contract.getEventDetails(eventId);

          ticketInfo.eventName = eventDetails[1];
          ticketInfo.eventDetails = eventDetails[2];
          ticketInfo.eventImage = eventDetails[5];
          ticketInfo.ticketImage = eventDetails[6];

          resaleTicketDetails.push(ticketInfo);
        }
      }

      // Render the tickets for sale on the page
      const resaleTicketList = document.getElementById('resaleTicketList');
      resaleTicketList.innerHTML = '';

      resaleTicketDetails.forEach((ticket) => {
        const listItem = document.createElement('li');
        listItem.classList.add('list-group-item', 'm-2', 'bg-dark', 'text-white');

        const divRow = document.createElement('div');
        divRow.classList.add('row');

        const divLeft = document.createElement('div');
        divLeft.classList.add('col-5');

        const divRight = document.createElement('div');
        divRight.classList.add('col-7');

        // Create elements to show sales ticket information
        const eventNameElement = document.createElement('h3');
        eventNameElement.classList.add('mt-2')
        eventNameElement.textContent = `Event Name: ${ticket.eventName}`;

        const eventDetailsElement = document.createElement('p');
        eventDetailsElement.textContent = `Details: ${ticket.eventDetails}`;

        const ticketIdElement = document.createElement('p');
        ticketIdElement.classList.add('mt-2');
        ticketIdElement.textContent = `Ticket ID: ${ticket.id}`;

        const priceElement = document.createElement('p');
        priceElement.textContent = `Price: ${ethers.utils.formatEther(ticket.price)} ETH`;

        const sellerElement = document.createElement('p');
        sellerElement.textContent = `Seller: ${ticket.owner}`;

        const eventImageElement = document.createElement('img');
        eventImageElement.src = ticket.eventImage;
        eventImageElement.alt = 'Event Image';
        eventImageElement.style.maxWidth = '300px';

        const ticketImageElement = document.createElement('img');
        ticketImageElement.src = ticket.ticketImage;
        ticketImageElement.alt = 'Ticket Image';
        ticketImageElement.style.maxWidth = '150px';

        // Buy button
        const buyButton = document.createElement('button');
        buyButton.textContent = 'Buy Ticket';
        buyButton.classList.add('btn', 'button-one', 'mt-2');
        
        buyButton.onclick = async () => {
          try {
            const gasLimit = 300000;

            await contract.buyTicket(ticket.id, {
              value: ticket.price,
              gasLimit: gasLimit
            });

            // Success
            console.log("Ticket purchased successfully!");
          } catch (error) {
            // Error
            console.error("Error purchasing ticket:", error);
            alert("Error purchasing ticket.");
          }
        };

        // Add items to the list of tickets for sale 
        divLeft.appendChild(eventImageElement);
        divLeft.appendChild(eventNameElement);
        divLeft.appendChild(eventDetailsElement);
        divRight.appendChild(ticketImageElement);
        divRight.appendChild(ticketIdElement);
        divRight.appendChild(priceElement);
        divRight.appendChild(sellerElement);
        divRight.appendChild(buyButton);

        divRow.appendChild(divLeft);
        divRow.appendChild(divRight);

        listItem.appendChild(divRow);

        resaleTicketList.appendChild(listItem);
      });

    } catch (error) {
      console.error('Error loading tickets for sale:', error);
      alert('Error loading tickets for sale. Check console for more details.');
    }
  } // end loadResaleTickets

  // Call the function to load the tickets for sale when loading the page
  window.onload = loadResaleTickets;

</script>

<%- include partials/footer.ejs %>
